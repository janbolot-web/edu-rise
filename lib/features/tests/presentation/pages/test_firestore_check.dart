import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../../../../core/theme/app_colors.dart';

class TestFirestoreCheck extends StatefulWidget {
  const TestFirestoreCheck({super.key});

  @override
  State<TestFirestoreCheck> createState() => _TestFirestoreCheckState();
}

class _TestFirestoreCheckState extends State<TestFirestoreCheck> {
  String _result = '';
  bool _loading = false;

  Future<void> _checkTests() async {
    setState(() {
      _loading = true;
      _result = '';
    });

    try {
      final firestore = FirebaseFirestore.instance;
      
      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –í–°–ï –¥–æ–∫—É–º–µ–Ω—Ç—ã
      print('\n========== FIRESTORE CHECK ==========');
      final allDocs = await firestore.collection('tests').get();
      print('üì¶ –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: ${allDocs.docs.length}');
      
      String report = 'üì¶ –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${allDocs.docs.length}\n\n';
      
      for (var doc in allDocs.docs) {
        final data = doc.data();
        print('\n--- –î–æ–∫—É–º–µ–Ω—Ç: ${doc.id} ---');
        print('  title: ${data['title']}');
        print('  status: ${data['status']}');
        print('  subject: ${data['subject']}');
        
        report += 'üìÑ ${data['title']}\n';
        report += '   ID: ${doc.id}\n';
        report += '   Status: ${data['status']}\n';
        report += '   Subject: ${data['subject']}\n\n';
      }
      
      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º query –∫–∞–∫ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
      print('\n--- –ü—Ä–æ–≤–µ—Ä—è–µ–º query —Å —Ñ–∏–ª—å—Ç—Ä–æ–º status=published ---');
      final publishedDocs = await firestore
          .collection('tests')
          .where('status', isEqualTo: 'published')
          .get();
      print('üìó –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö: ${publishedDocs.docs.length}');
      
      report += '\n‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö (status=published): ${publishedDocs.docs.length}\n\n';
      
      for (var doc in publishedDocs.docs) {
        final data = doc.data();
        report += '  ‚úì ${data['title']}\n';
      }
      
      // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞
      print('\n--- –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ ---');
      final noFilterDocs = await firestore
          .collection('tests')
          .limit(10)
          .get();
      print('üìò –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ (–ø–µ—Ä–≤—ã–µ 10): ${noFilterDocs.docs.length}');
      
      report += '\n\nüìò –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ (–ø–µ—Ä–≤—ã–µ 10): ${noFilterDocs.docs.length}\n';
      
      // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
      if (allDocs.docs.isNotEmpty) {
        print('\n--- –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ---');
        final firstDoc = allDocs.docs.first;
        final data = firstDoc.data();
        
        report += '\n\nüîç –î–µ—Ç–∞–ª–∏ –ø–µ—Ä–≤–æ–≥–æ —Ç–µ—Å—Ç–∞:\n';
        
        final requiredFields = [
          'title', 'description', 'subject', 'gradeLevel', 
          'difficulty', 'duration', 'teacherId', 'teacherName',
          'status', 'createdAt', 'questions'
        ];
        
        for (var field in requiredFields) {
          final hasField = data.containsKey(field);
          final value = hasField ? data[field] : null;
          print('  $field: ${hasField ? "‚úì" : "‚úó"} = $value');
          
          report += '  ${hasField ? "‚úÖ" : "‚ùå"} $field: ${value ?? "–û–¢–°–£–¢–°–¢–í–£–ï–¢"}\n';
        }
      }
      
      print('\n========== END CHECK ==========\n');
      
      setState(() {
        _result = report;
        _loading = false;
      });
      
    } catch (e, stack) {
      print('‚ùå –û—à–∏–±–∫–∞: $e');
      print(stack);
      setState(() {
        _result = '‚ùå –û—à–∏–±–∫–∞: $e';
        _loading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: appBackground,
      appBar: AppBar(
        backgroundColor: appPrimary,
        title: Text(
          '–ü—Ä–æ–≤–µ—Ä–∫–∞ Firestore',
          style: GoogleFonts.montserrat(
            color: Colors.white,
            fontWeight: FontWeight.w700,
          ),
        ),
        iconTheme: const IconThemeData(color: Colors.white),
      ),
      body: Column(
        children: [
          Container(
            width: double.infinity,
            padding: const EdgeInsets.all(20),
            color: Colors.blue.shade50,
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  'üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Firestore',
                  style: GoogleFonts.montserrat(
                    fontSize: 18,
                    fontWeight: FontWeight.w700,
                    color: appPrimary,
                  ),
                ),
                const SizedBox(height: 8),
                Text(
                  '–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—á–µ–º—É —Ç–µ—Å—Ç—ã –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è',
                  style: GoogleFonts.montserrat(
                    fontSize: 14,
                    color: appSecondary,
                  ),
                ),
              ],
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(20),
            child: ElevatedButton.icon(
              onPressed: _loading ? null : _checkTests,
              icon: _loading
                  ? const SizedBox(
                      width: 20,
                      height: 20,
                      child: CircularProgressIndicator(
                        strokeWidth: 2,
                        color: Colors.white,
                      ),
                    )
                  : const Icon(Icons.search, color: Colors.white),
              label: Text(
                _loading ? '–ü—Ä–æ–≤–µ—Ä—è–µ–º...' : '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å Firestore',
                style: GoogleFonts.montserrat(
                  fontWeight: FontWeight.w600,
                  color: Colors.white,
                ),
              ),
              style: ElevatedButton.styleFrom(
                backgroundColor: appAccentEnd,
                padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 24),
              ),
            ),
          ),
          if (_result.isNotEmpty)
            Expanded(
              child: SingleChildScrollView(
                padding: const EdgeInsets.symmetric(horizontal: 20),
                child: Container(
                  width: double.infinity,
                  padding: const EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.circular(12),
                    border: Border.all(color: Colors.grey.shade300),
                  ),
                  child: SelectableText(
                    _result,
                    style: GoogleFonts.robotoMono(
                      fontSize: 13,
                      color: appPrimary,
                      height: 1.5,
                    ),
                  ),
                ),
              ),
            ),
        ],
      ),
    );
  }
}
